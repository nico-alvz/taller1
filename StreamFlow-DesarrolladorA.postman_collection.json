{
	"info": {
		"_postman_id": "2d4355cd-fc51-4570-8dcb-e4de8c031605",
		"name": "StreamFlow - Desarrollador A",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30263565"
	},
	"item": [
		{
			"name": "Flujo 1",
			"item": [
				{
					"name": "[1] Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token admin guardado\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.environment.set(\"admin_token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@streamflow.com\",\n    \"password\": \"Admin123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2] Obtener Videos (con auth)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listado de videos\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"    pm.expect(pm.response.json()[0].id).to.eql(\"video1\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"videos"
							]
						}
					},
					"response": []
				},
				{
					"name": "[3] Registrar Cliente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const timestamp = new Date().getTime();",
									"pm.variables.set('timestamp', timestamp);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// En el test de \"[1] Registrar Cliente\"",
									"pm.test(\"Registro exitoso\", () => {",
									"    pm.response.to.have.status(201);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.user).to.exist;",
									"    pm.environment.set(\"client_email\", jsonData.user.email);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Cliente\",\n    \"lastName\": \"Demo\",\n    \"email\": \"cliente{{timestamp}}@demo.com\",\n    \"password\": \"Demo123!\",\n    \"confirmPassword\": \"Demo123!\",\n    \"role\": \"Cliente\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/usuarios",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "[4] Login Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Login exitoso\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.environment.set(\"client_token\", jsonData.token);",
									"    pm.environment.set(\"client_email\", jsonData.email);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{client_email}}\",\n    \"password\": \"Demo123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[5] Obtener Video por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Detalle del video\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json().id).to.eql(\"video1\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{client_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/videos/video1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"videos",
								"video1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Flujo 2",
			"item": [
				{
					"name": "[1] Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Token admin guardado\", function () {",
									"    pm.response.to.have.status(200);",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.token).to.exist;",
									"    pm.environment.set(\"admin_token\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"admin@streamflow.com\",\n    \"password\": \"Admin123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[2] Obtener Facturas",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Listado de facturas\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(pm.response.json()).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/facturas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"facturas"
							]
						}
					},
					"response": []
				},
				{
					"name": "[3] Actualizar Factura",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 y estado actualizado\", () => {",
									"    // Verificar c칩digo de estado primero",
									"    pm.response.to.have.status(200);",
									"",
									"    // Logs para depuraci칩n",
									"    console.log(\"Respuesta recibida. C칩digo:\", pm.response.code);",
									"    console.log(\"Headers:\", pm.response.headers);",
									"",
									"    // Parsear JSON de manera segura",
									"    let jsonData;",
									"    try {",
									"        jsonData = pm.response.json();",
									"        console.log(\"Body parseado:\", jsonData);",
									"    } catch (e) {",
									"        console.error(\"Error al parsear JSON:\", e, \"Raw body:\", pm.response.text());",
									"        pm.expect.fail(\"La respuesta no es JSON v치lido\");",
									"        return;",
									"    }",
									"",
									"    // Validar propiedades",
									"    pm.expect(jsonData).to.have.property(\"id\", \"factura1\");",
									"    pm.expect(jsonData).to.have.property(\"estado\", \"Pagado\");",
									"    pm.expect(jsonData.fechaPago).to.exist;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"connection": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							},
							{
								"key": "Connection",
								"value": "close",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"estado\": \"Pagado\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/facturas/factura1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"facturas",
								"factura1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080"
		},
		{
			"key": "admin_token",
			"value": ""
		},
		{
			"key": "client_token",
			"value": ""
		},
		{
			"key": "client_email",
			"value": ""
		}
	]
}